buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "org.sonarqube" version "2.6"
    id "com.wynprice.cursemaven" version "2.1.1"
}

allprojects {
    group = mod_group

    apply plugin: "net.minecraftforge.gradle.forge"
    apply plugin: 'signing'

    sourceCompatibility = targetCompatibility = '1.8'
}

version = dissolution_version
archivesBaseName = "Dissolution"

allprojects {

    minecraft {
        version = project.forge_version
        runDir = "run"
        replace '@VERSION@', project.version
        if (project.hasProperty('keyStore')) {
            replace '@FINGERPRINT@', project.findProperty('signSHA1')
        }

        mappings = project.mcp_version
        makeObfSourceJar = false // Disable Srg named sources jar
    }

    apply from: new File(rootProject.projectDir, 'dependencies.gradle')
    apply from: new File(rootProject.projectDir, 'update_json.gradle')

    build.finalizedBy updateJson

    jar {
        from sourceSets.main.output
        manifest {
            attributes([
                    'Maven-Artifact': "${project.group}:${archivesBaseName}:${project.version}",
                    'Timestamp'     : System.currentTimeMillis()
            ])
        }
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include "mcmod.info"

            // replace version and mcversion
            expand "version": project.version, "mcversion": project.minecraft.version
        }

        // copy everything else, that's not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude "mcmod.info"
        }

        rename '(.+_at.cfg)', 'META-INF/$1'
    }

    task signJar(type: SignJar, dependsOn: reobfJar) {
        onlyIf {
            project.hasProperty('keyStore')
        }

        keyStore = project.properties.keyStore
        alias = project.properties.keyStoreAlias
        storePass = project.properties.keyStorePass
        keyPass = project.properties.keyStoreKeyPass
    }
	
	compileJava {
		options.encoding = 'UTF-8'
	}

    build.dependsOn signJar
}

apply plugin: 'maven'

// Define additional jar creating tasks to be used as dependencies
task sourcesJar(type: Jar) {
    classifier = 'sources'
}
task apiJar(type: Jar) {
    classifier = 'api'
}

configurations {
    contained
    contained.transitive = false
}

dependencies {
    contained  "com.github.Pyrofab:Ladylib:${ladylib_version}"
    contained  "com.jamieswhiteshirt:clothesline-hooks:${mc_version}-${clothesline_hook_version}"
    contained files(apiJar.archivePath) {
        builtBy apiJar
    }
}

//Builds the main jar
jar {
    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
                'ContainedDeps': configurations.contained.files.collect { it.name }.join(" ")
        ])
    }
    archiveName = "${archivesBaseName}-${mc_version}-${dissolution_version}${version_nickname}.jar"

    manifest {
        attributes 'FMLAT': 'dissolution_at.cfg'
    }
}

//Builds an api jar
apiJar {
    from sourceSets.api.output
    from sourceSets.api.allJava
    manifest {
        attributes([
                'Maven-Artifact': "${project.group}:${archivesBaseName}:${classifier}:${project.version}",
                'Timestamp'     : System.currentTimeMillis()
        ])
    }
}

//Builds a source jar
sourcesJar {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
}

updateJson {
    beta = true
    curseforgeURL = "https://minecraft.curseforge.com/projects/dissolution"
}

signJar {
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

artifacts {
    archives(apiJar) {
        type 'jar'
        builtBy apiJar
        classifier 'api'
    }
    archives sourceJar
}
install.dependsOn(signJar)